const { Helper } = require('node-infinito-util');
const Assert = require('assert');
const InfinitoApi = require('../index');
const Messages = require('../lib/messages');
const ConfigTest = require('./config.test');
const util = require('util')
const chai = require("chai");
chai.should();

const opts = {
  apiKey: ConfigTest.API_KEY,
  secret: ConfigTest.SECRECT,
  baseUrl: ConfigTest.BASE_URL,
  logLevel: ConfigTest.LOG_LEVEL
};

const addresses = {
  normal: "XhPdPRbeYrPFZPqnyCUGuyUUs1g8ZDaTma",
  invalid: "XhPdPRbeYrPFZPqnyCUGuyUUs1g8ZDaTmanm",
  lessThan_10txs: "XhPdPRbeYrPFZPqnyCUGuyUUs1g8ZDaTma",
  moreThan_10txs: "XxviPxvESQ4ATkZTFJ3RboWUy2cntzX4Vk",
  moreThan_50txs: "XoowiBmAJtaMd6NiuxL2iQ2UzzQPWcM7em",
  noUTXO: "XoowiBmAJtaMd6NiuxL2iQ2UzzQPWcM7em",
  someUTXO: "XxviPxvESQ4ATkZTFJ3RboWUy2cntzX4Vk"
};

const txIdEx = '54fda8de232eb9df180fc6ec161e187ae51ae052ff4e92726ff960370e40f146';
const blkIdxEx = 500000;
const blkIdEx = '000000000000001e9a55aecba4f53b2034a52794b0901f2c90ffe70a85c853eb';
const rawtxEx = '010000000163dae12bfbe3e041c9c0f219b9312bcd52c3c9a83a7de1676c8981f2b8ef8167010000006a473044022029671d1644666b909f4a96344918121871a931e8c5233332ab6da73129949c0d02203dd2c1212f1a1a06c67b33d48383f6ff89c33cccc81a22f5741baec28bbbccb701210222acda004b1399eb9bca2472095e9e33df1e5c3dc622bdef0c866f40c72bd233feffffff0200933451000000001976a91456588321c4d829ad52d1b2bb12934866c6a1111288ac2993da5e000000001976a91402427ce3b03a94b976d19a8b81646182e5381a0b88ac34260e00';

var api = null;
var coinAPI = null;

describe('api.dash', async () => {

  beforeEach(async () => {
    api = new InfinitoApi(opts);
    coinAPI = api.DASH;
  });

  describe('#getBalance(address)', async () => {

    it('Get balance first time', async () => {
      var result = await coinAPI.getBalance(addresses.normal);
      Assert.ok(result.data.balance !== undefined, 'balance must be exist');
      Assert.ok(result.data.unconfirmed_balance !== undefined, 'unconfirmed_balance must be exist');
    });

    it('Get balance with wrong api key', async () => {
      coinAPI = new InfinitoApi(Helper.merge({}, opts, { apiKey : 'wrong api key' })).DASH;
      
      try {
        await coinAPI.getBalance(addresses.normal);
        Assert.fail('Should throw exception');
      } catch (err) {
        Assert.equal(err.code, Messages.invalid_api_key.code);
        Assert.equal(err.message, Messages.invalid_api_key.message);
      }
    });

    it('test dynamic ', async () => {
      let balance = await coinAPI.getBalance('getAddressInfogetAddressInfo');
      console.log('balance :', balance);

      let history = await coinAPI.getHistory(addresses.normal, 1, 2);
      console.log('history :', history);

      let utxo = await coinAPI.getUtxo(addresses.normal);
      console.log('utxo :', utxo);
    });

    it('test dynamic expired key', async () => {
      api.tokenProvider.setToken(ConfigTest.EXPRIRED_TOKEN);

      coinAPI.getBalance(addresses.normal);
      coinAPI.getHistory(addresses.normal, 1, 2);
      coinAPI.getUtxo(addresses.normal);
    });

  });

  /*************************** Add get Address info *******************************/
  describe('#getInfo(address)', async () => {

    /*Testcase: Check with valid address*/
    it('Check with valid address', async () => {
      let info = await coinAPI.getAddressInfo(addresses.normal);
      // console.log(info);
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('addr');
      info.data.should.have.property('balance');
      info.data.should.have.property('unconfirmed_balance');
      info.data.should.have.property('total_received');
      info.data.should.have.property('total_sent');
      info.data.should.have.property('total_tx');
    });
  });

  /************************** Add get Address history ******************************/
  describe('#getHistory(address)', async () => {

    /*Testcase: 
          Input parameter:
            addr with >10 transaction
            no offset
            no limit*/
    it('addr with >10 transaction | no offset | no limit', async () => {
      let info = await coinAPI.getHistory(addresses.moreThan_10txs);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('from');
      info.data.should.have.property('to');
      info.data.should.have.property('txs');
    });
  });

  /************************* Add get Address utxo ****************************/
  describe('#getUtxo(address)', async () => {

    /*Testcase: 
      Input parameter:
        addr with some utxo*/
    it('addr with some utxo', async () => {
      let info = await coinAPI.getUtxo(addresses.someUTXO);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get transaction info ****************************/
  describe('#getTxInfo(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('transaction info', async () => {
      let info = await coinAPI.getTxInfo(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('tx_id');
      info.data.should.have.property('version');
      info.data.should.have.property('locktime');
      info.data.should.have.property('vin');
      info.data.should.have.property('vout');
    });
  });

  /************************* Add get raw transaction ****************************/
  describe('#getRawTx(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('raw transaction', async () => {
      let info = await coinAPI.getRawTx(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_tx');
    });
  });

  /************************* Add get blockHash by blockIndex ****************************/
  describe('#getBlockHashByIndex(index)', async () => {

    /*Testcase: 
      Input parameter:
        Block Index*/
    it('blockHash by blockIndex', async () => {
      let info = await coinAPI.getBlockHashByIndex(blkIdxEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
    });
  });

  /************************* Add get block info ****************************/
  describe('#getBlockInfo(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('block info', async () => {
      let info = await coinAPI.getBlockInfo(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
      info.data.should.have.property('size');
      info.data.should.have.property('height');
      info.data.should.have.property('version');
      info.data.should.have.property('merkleroot');
      info.data.should.have.property('time');
      info.data.should.have.property('nonce');
      info.data.should.have.property('bits');
      info.data.should.have.property('difficulty');
      info.data.should.have.property('chainwork');
      info.data.should.have.property('confirmations');
      info.data.should.have.property('previous_block_hash');
      info.data.should.have.property('next_block_hash');
      info.data.should.have.property('reward');
      info.data.should.have.property('pool_info');
    });
  });

  /************************* Add get transactions in a block ****************************/
  describe('#getBlockTxs(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('transactions in a block', async () => {
      let info = await coinAPI.getBlockTxs(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get raw block ****************************/
  describe('#getRawBlock(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('raw block', async () => {
      let info = await coinAPI.getRawBlock(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_block');
    });
  });

  /************************* post Send Raw ***********************************/
  describe('#postSendRaw', async () => {

    it('send a tx', async () => {
      let res = await coinAPI.sendTransaction({rawtx: rawtxEx});
      console.log(res);
      res.should.have.property('cd');
    });
  });
});