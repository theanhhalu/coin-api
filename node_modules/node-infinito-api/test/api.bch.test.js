const { Helper } = require('node-infinito-util');
const Assert = require('assert');
const InfinitoApi = require('../index');
const Messages = require('../lib/messages');
const ConfigTest = require('./config.test');
const util = require('util')
const chai = require("chai");
chai.should();

const opts = {
  apiKey: ConfigTest.API_KEY,
  secret: ConfigTest.SECRECT,
  baseUrl: ConfigTest.BASE_URL,
  logLevel: ConfigTest.LOG_LEVEL
};

const addresses = {
  normal: "12WokNpt6nkbzmuVjgLMsfyoyfSgUqCaz9",
  invalid: "12WokNpt6nkbzmuVjgLMsfyoyfSgUqCaz9cm",
  lessThan_10txs: "14zziQwCEYG8GHBpTJHD7yymt1bWB4r3xM",
  moreThan_10txs: "12WokNpt6nkbzmuVjgLMsfyoyfSgUqCaz9",
  moreThan_50txs: "1P3GQYtcWgZHrrJhUa4ctoQ3QoCU2F65nz",
  noUTXO: "12WokNpt6nkbzmuVjgLMsfyoyfSgUqCaz9",
  someUTXO: "1P3GQYtcWgZHrrJhUa4ctoQ3QoCU2F65nz"
};

const txIdEx = 'c972ad719323ae6140a30232328baae7408f38b4f55ef98015a9cfa80c02b7f8';
const blkIdxEx = 500000;
const blkIdEx = '000000000000000000e8f2daf49de10e2ca19c056f20dfb2488d71a7f6738311';
const rawtxEx = '01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff5503b4510841d6e0e0c8b379c241d6e0e0c787839c2f4254432e544f502ffabe6d6d11d903c136a2ecf1bf06bbda13f2ffcd2f84af323add8372c57ff49d0979cac48000000000000000cf00170ef510000000000000ffffffff0190a1814a000000001976a9146d5bda2ee1b2ae0160c17d33f56218c7a1d37fce88ac00000000';

var api = null;
var coinAPI = null;

describe('api.bch', async () => {

  beforeEach(async () => {
    api = new InfinitoApi(opts);
    coinAPI = api.BCH;
  });

  describe('#getBalance(address)', async () => {

    it('Get balance first time', async () => {
      var result = await coinAPI.getBalance(addresses.normal);
      Assert.ok(result.data.balance !== undefined, 'balance must be exist');
      Assert.ok(result.data.unconfirmed_balance !== undefined, 'unconfirmed_balance must be exist');
    });

    it('Get balance with wrong api key', async () => {
      coinAPI = new InfinitoApi(Helper.merge({}, opts, { apiKey : 'wrong api key' })).BCH;
      
      try {
        await coinAPI.getBalance(addresses.normal);
        Assert.fail('Should throw exception');
      } catch (err) {
        Assert.equal(err.code, Messages.invalid_api_key.code);
        Assert.equal(err.message, Messages.invalid_api_key.message);
      }
    });

    it('test dynamic ', async () => {
      let balance = await coinAPI.getBalance('getAddressInfogetAddressInfo');
      console.log('balance :', balance);

      let history = await coinAPI.getHistory(addresses.normal, 1, 2);
      console.log('history :', history);

      let utxo = await coinAPI.getUtxo(addresses.normal);
      console.log('utxo :', utxo);
    });

    it('test dynamic expired key', async () => {
      api.tokenProvider.setToken(ConfigTest.EXPRIRED_TOKEN);

      coinAPI.getBalance(addresses.normal);
      coinAPI.getHistory(addresses.normal, 1, 2);
      coinAPI.getUtxo(addresses.normal);
    });

  });

  /*************************** Add get Address info *******************************/
  describe('#getInfo(address)', async () => {

    /*Testcase: Check with valid address*/
    it('Check with valid address', async () => {
      let info = await coinAPI.getAddressInfo(addresses.normal);
      // console.log(info);
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('addr');
      info.data.should.have.property('balance');
      info.data.should.have.property('unconfirmed_balance');
      info.data.should.have.property('total_received');
      info.data.should.have.property('total_sent');
      info.data.should.have.property('total_tx');
    });
  });

  /************************** Add get Address history ******************************/
  describe('#getHistory(address)', async () => {

    /*Testcase: 
          Input parameter:
            addr with >10 transaction
            no offset
            no limit*/
    it('addr with >10 transaction | no offset | no limit', async () => {
      let info = await coinAPI.getHistory(addresses.moreThan_10txs);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('from');
      info.data.should.have.property('to');
      info.data.should.have.property('txs');
    });
  });

  /************************* Add get Address utxo ****************************/
  describe('#getUtxo(address)', async () => {

    /*Testcase: 
      Input parameter:
        addr with some utxo*/
    it('addr with some utxo', async () => {
      let info = await coinAPI.getUtxo(addresses.someUTXO);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get transaction info ****************************/
  describe('#getTxInfo(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('transaction info', async () => {
      let info = await coinAPI.getTxInfo(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('tx_id');
      info.data.should.have.property('version');
      info.data.should.have.property('locktime');
      info.data.should.have.property('vin');
      info.data.should.have.property('vout');
    });
  });

  /************************* Add get raw transaction ****************************/
  describe('#getRawTx(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('raw transaction', async () => {
      let info = await coinAPI.getRawTx(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_tx');
    });
  });

  /************************* Add get blockHash by blockIndex ****************************/
  describe('#getBlockHashByIndex(index)', async () => {

    /*Testcase: 
      Input parameter:
        Block Index*/
    it('blockHash by blockIndex', async () => {
      let info = await coinAPI.getBlockHashByIndex(blkIdxEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
    });
  });

  /************************* Add get block info ****************************/
  describe('#getBlockInfo(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('block info', async () => {
      let info = await coinAPI.getBlockInfo(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
      info.data.should.have.property('size');
      info.data.should.have.property('height');
      info.data.should.have.property('version');
      info.data.should.have.property('merkleroot');
      info.data.should.have.property('time');
      info.data.should.have.property('nonce');
      info.data.should.have.property('bits');
      info.data.should.have.property('difficulty');
      info.data.should.have.property('chainwork');
      info.data.should.have.property('confirmations');
      info.data.should.have.property('previous_block_hash');
      info.data.should.have.property('next_block_hash');
      info.data.should.have.property('reward');
      info.data.should.have.property('pool_info');
    });
  });

  /************************* Add get transactions in a block ****************************/
  describe('#getBlockTxs(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('transactions in a block', async () => {
      let info = await coinAPI.getBlockTxs(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get raw block ****************************/
  describe('#getRawBlock(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('raw block', async () => {
      let info = await coinAPI.getRawBlock(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_block');
    });
  });

  /************************* post Send Raw ***********************************/
  describe('#postSendRaw', async () => {

    it('send a tx', async () => {
      let res = await coinAPI.sendTransaction({rawtx: rawtxEx});
      console.log(res);
      res.should.have.property('cd');
    });
  });
});