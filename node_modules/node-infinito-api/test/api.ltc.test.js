const { Helper } = require('node-infinito-util');
const Assert = require('assert');
const InfinitoApi = require('../index');
const Messages = require('../lib/messages');
const ConfigTest = require('./config.test');
const util = require('util')
const chai = require("chai");
chai.should();

const opts = {
  apiKey: ConfigTest.API_KEY,
  secret: ConfigTest.SECRECT,
  baseUrl: ConfigTest.BASE_URL,
  logLevel: ConfigTest.LOG_LEVEL
};

const addresses = {
  normal: "LU4Rk5xHz3Awfi6KeiRaupZqausrbHWXAP",
  invalid: "LU4Rk5xHz3Awfi6KeiRaupZqausrbHWXAPnm",
  lessThan_10txs: "LQB2bZJvC4oGvf63eWebX3n54qquWoPhcH",
  moreThan_10txs: "LRW6iW3NGmT1wrVK3dTAq6UZ9qbEaYmS3y",
  moreThan_50txs: "LdxToaZif4q1hWqKhNx5ieKsPunKXZMUgs",
  noUTXO: "LP8fvvYWngYQ54BNL6s6HhSTBx94QaLTWq",
  someUTXO: "LduWkLMXJNprvLi2P4LnfSGwQL24rdVzzk"
};

const txIdEx = '91fa2cc157c89bfab106bf2cf5b0ab2748dbb61c94b6e6ccc061649bcdcd5712';
const blkIdxEx = 500000;
const blkIdEx = '90976f4a169b4c7386bdb82cb26259d600cf9ffa7a9089e8ab7cbfba6dbbc1fd';
const rawtxEx = '020000000d3ebf2b96315f5215377cc2ada64321cd7e05add8f23987a80ec9fb617109591f010000006a4730440220115f0b6fc99e9b62915a1726fa0f6afe57c6f08c29402fda2510aca9e7e3e50102203b452a4dc17347c8ebded73f48d00b698bdfa2e4ba98dcb1fc21f77ec3d01be30121038756d0eb72d202d5fda59364900d13e68660284850093e2a602bd372b7a63f8afeffffff43ab0310385751f386f6f9d892b1dde7950a45b07ab25f93e6c9ee2050757058000000006a47304402202f6c1d42b7a36f0eb48e8600022c24ba1a0d64fb62a9d4462fcd7d0be4fa704e022012cca8704af6866d539a19938b043626ae0d9b7c6d751674c10ec5e9723f762701210339f7eb788cc570940dcc3c0d413ad146c57420c93d9244fb905bda6f2953cf8bfeffffff5b991114fe95f1cce47a8f6a5370367cc050bcd6a4438e70f7e8ed915e56069e640000006a4730440220209b7e536bee60552732acd6636ace9bb4e3d576480b147b79e78583f8a213c2022006f529796ef263e1d863dd377eb7a76192a74f4af03ba46cf3ad8108e0b385d20121028349c217d54abd93e1e0ac03d3ae9b8b584c0ca60fd17dedb506c5e410f568c8feffffff5b991114fe95f1cce47a8f6a5370367cc050bcd6a4438e70f7e8ed915e56069ecc0000006b4830450221008d8989998a49e561ae61ad704928536205cdb16161c34bfe61f831f6b23e36f202200b006d71d1b38c024d4e8637ad4ad3cc879d2210e42d2a538f5bb6a6b892d58f01210334224d3accbd570b0c61e3c1ce5da25c87e3c9746757934ce9e271eaf2f6bc23feffffff5b991114fe95f1cce47a8f6a5370367cc050bcd6a4438e70f7e8ed915e56069e200100006a4730440220443eb0253763817824517f9e1ed623373d50e053eacab1e314f554013a3fa48e022023bfb77d9422fd09514b3c86a341ad3f3b4602dfef02287135a513f3713df17a012103fd56246449187d044d63587afc1600f64f7b2474ec00e1a9bcaef8e2505a7583feffffff5b991114fe95f1cce47a8f6a5370367cc050bcd6a4438e70f7e8ed915e56069e8b0100006b4830450221009e444006b0223c7dc0a285eac7f65f452167383071f4aa30c6d71e33e36c5f9202204f2ef4529ea2b5daaa0377e00995116874da68c43bd89b4c194914406d11f6350121023be925eac8b13039e883d4119d302fa71d57dce1402e0f20a0e0040d24fb2c85feffffff5b991114fe95f1cce47a8f6a5370367cc050bcd6a4438e70f7e8ed915e56069e120200006b483045022100ca5a0c1bf822e33796a721ed54fa2c5f73b3157e915ea3d2426d3d1dfe632451022031dbf6dbd2cb050c4c26212a7611a23510a3ec226a893a66b5fba6948d6dcdda012102b9719e3c68172b63b74435676c39d74f277a706fa2ba7f389070c4e28a1a0f4ffeffffff5b991114fe95f1cce47a8f6a5370367cc050bcd6a4438e70f7e8ed915e56069e410200006a47304402203dc3e27e04fdb6049d21958f6d39c6e4b253f0ee2c8aae4c8fe9cf664df4ba0c022042045b4472e4c64d0348b6f8d34651a4dc8143e3bd5aca6ae4f63f1f84f7ecf0012102626623416eda5981276fcb3ee4804433d3401fe520ffd06baef12937fda4ac03feffffff5b991114fe95f1cce47a8f6a5370367cc050bcd6a4438e70f7e8ed915e56069e440200006a473044022064eb48b99922118004350a355a08a52d1f482dc709533e4c1bf5c6ec8a8940f802205c273d93a2f35ace857bfbe54f341451184078333fe3eb680c8916f8dace58950121030630c08bb3c5c03cef0097aa2964fecc74dbbb169687decb0c1099d9944c16f3feffffff6d024e2c4a0ef795044549b376e7d57bbd900248cfc48f90eba36854918255fd000000006a4730440220102a7306d57e07dc06eabef98dfaddf4f4fcfb7b3c7e65b2fc2e9306c632199f0220599a818893eb563cfb576dad6a8069c42f647c4b7b4d6336014f5cffead0f8de0121035f5b73d4dde9bcd12718212b36877160522ed4ba4a5ba79dcf1d04759d51199dfeffffff856da630f107a1d671aa866c97ca93d7c221589ff5d0124b41ccdbccb41a520e080000006b483045022100beed61834ab3fba05b77abc21c10062fcd821c24b1cc22ab86b246b9d726239902201bce2fa79d481e0cfad55167e35e6871791ab92f7a6f63d593d2b8551be5ecf1012103cd02d9111ccbe48e26e5309fb128b55874dc6c0626227e736a981a2061b3ff54feffffffbbea4260e541aeeb7af99e3393f3506c6b264099b5d74f5dbf0959fd28476008010000006a4730440220651aa0c6b43c9eae6d7a05d10d90e0608a606f741d76018e975c299dc33bc36f022051a29c6654491d2368397acef53023af9c08b1b483c45c585ff4e03e0206857e0121027a317d70bec0a47a5ca7893e66f28e114702fb9fc77e3f6f487762966950d247feffffffc030df279171e15e0346c90224902c2c7b2a205be0f12e5423ee95522fd4a5e7010000006a473044022023846c520a8a3ac874459ac147b3916e547534f2ec9f15d27454bd1c5f85c758022021130529d219ca5084ebc2b695522b41e334ae547d1c9b6d196f577b6feb258d012102d3369da4e923ce26c0f4fe8ab60ca858e6c9137a0216399f3a12f52c39023303feffffff0231260900000000001976a914d22bfcb149087d6b123170f5f13527f3b7e3c76588ace54f690c000000001976a9143b5c68c2732ee8f6aec50277033df722eb8076a488ac669a1600';

var api = null;
var coinAPI = null;

describe('api.ltc', async () => {

  beforeEach(async () => {
    api = new InfinitoApi(opts);
    coinAPI = api.LTC;
  });

  describe('#getBalance(address)', async () => {

    it('Get balance first time', async () => {
      var result = await coinAPI.getBalance(addresses.normal);
      Assert.ok(result.data.balance !== undefined, 'balance must be exist');
      Assert.ok(result.data.unconfirmed_balance !== undefined, 'unconfirmed_balance must be exist');
    });

    it('Get balance with wrong api key', async () => {
      coinAPI = new InfinitoApi(Helper.merge({}, opts, { apiKey : 'wrong api key' })).LTC;
      
      try {
        await coinAPI.getBalance(addresses.normal);
        Assert.fail('Should throw exception');
      } catch (err) {
        Assert.equal(err.code, Messages.invalid_api_key.code);
        Assert.equal(err.message, Messages.invalid_api_key.message);
      }
    });

    it('test dynamic ', async () => {
      let balance = await coinAPI.getBalance('getAddressInfogetAddressInfo');
      console.log('balance :', balance);

      let history = await coinAPI.getHistory(addresses.normal, 1, 2);
      console.log('history :', history);

      let utxo = await coinAPI.getUtxo(addresses.normal);
      console.log('utxo :', utxo);
    });

    it('test dynamic expired key', async () => {
      api.tokenProvider.setToken(ConfigTest.EXPRIRED_TOKEN);

      coinAPI.getBalance(addresses.normal);
      coinAPI.getHistory(addresses.normal, 1, 2);
      coinAPI.getUtxo(addresses.normal);
    });

  });

  /*************************** Add get Address info *******************************/
  describe('#getInfo(address)', async () => {

    /*Testcase: Check with valid address*/
    it('Check with valid address', async () => {
      let info = await coinAPI.getAddressInfo(addresses.normal);
      // console.log(info);
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('addr');
      info.data.should.have.property('balance');
      info.data.should.have.property('unconfirmed_balance');
      info.data.should.have.property('total_received');
      info.data.should.have.property('total_sent');
      info.data.should.have.property('total_tx');
    });
  });

  /************************** Add get Address history ******************************/
  describe('#getHistory(address)', async () => {

    /*Testcase: 
          Input parameter:
            addr with >10 transaction
            no offset
            no limit*/
    it('addr with >10 transaction | no offset | no limit', async () => {
      let info = await coinAPI.getHistory(addresses.moreThan_10txs);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('from');
      info.data.should.have.property('to');
      info.data.should.have.property('txs');
    });
  });

  /************************* Add get Address utxo ****************************/
  describe('#getUtxo(address)', async () => {

    /*Testcase: 
      Input parameter:
        addr with some utxo*/
    it('addr with some utxo', async () => {
      let info = await coinAPI.getUtxo(addresses.someUTXO);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get transaction info ****************************/
  describe('#getTxInfo(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('transaction info', async () => {
      let info = await coinAPI.getTxInfo(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('tx_id');
      info.data.should.have.property('version');
      info.data.should.have.property('locktime');
      info.data.should.have.property('vin');
      info.data.should.have.property('vout');
    });
  });

  /************************* Add get raw transaction ****************************/
  describe('#getRawTx(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('raw transaction', async () => {
      let info = await coinAPI.getRawTx(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_tx');
    });
  });

  /************************* Add get blockHash by blockIndex ****************************/
  describe('#getBlockHashByIndex(index)', async () => {

    /*Testcase: 
      Input parameter:
        Block Index*/
    it('blockHash by blockIndex', async () => {
      let info = await coinAPI.getBlockHashByIndex(blkIdxEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
    });
  });

  /************************* Add get block info ****************************/
  describe('#getBlockInfo(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('block info', async () => {
      let info = await coinAPI.getBlockInfo(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
      info.data.should.have.property('size');
      info.data.should.have.property('height');
      info.data.should.have.property('version');
      info.data.should.have.property('merkleroot');
      info.data.should.have.property('time');
      info.data.should.have.property('nonce');
      info.data.should.have.property('bits');
      info.data.should.have.property('difficulty');
      info.data.should.have.property('chainwork');
      info.data.should.have.property('confirmations');
      info.data.should.have.property('previous_block_hash');
      info.data.should.have.property('next_block_hash');
      info.data.should.have.property('reward');
      info.data.should.have.property('pool_info');
    });
  });

  /************************* Add get transactions in a block ****************************/
  describe('#getBlockTxs(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('transactions in a block', async () => {
      let info = await coinAPI.getBlockTxs(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get raw block ****************************/
  describe('#getRawBlock(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('raw block', async () => {
      let info = await coinAPI.getRawBlock(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_block');
    });
  });

  /************************* post Send Raw ***********************************/
  describe('#postSendRaw', async () => {

    it('send a tx', async () => {
      let res = await coinAPI.sendTransaction({rawtx: rawtxEx});
      console.log(res);
      res.should.have.property('cd');
    });
  });
});