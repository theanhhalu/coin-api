const { Helper } = require('node-infinito-util');
const InfinitoApi = require('../index');
const ConfigTest = require('./config.test');
const chai = require("chai");
chai.should();

const opts = {
  apiKey: ConfigTest.API_KEY,
  secret: ConfigTest.SECRECT,
  baseUrl: ConfigTest.BASE_URL,
  logLevel: ConfigTest.LOG_LEVEL
};

const inputs = {
  account: "eoslaomaocom",
  account2: "datfix",
  asset_id: "EOS",
  pubkey: "EOS6e9D4ZJDf8NkFnMzw3Ff6gTU18x3GYV1nUwE2N4SnJNbQ9CdpT",
  pubkey2: "EOS6fPDz7unBYVWAWDSg3Fzmahj4e1m57tFsDGQqRHMkuNdVaB6s2",
  code: "ibl",
  symbol: "IBL"
};

var rawtx = {
  "compression": "none",
  "transaction": {
      "expiration": "2018-09-04T06:30:10",
      "ref_block_num": 17461,
      "ref_block_prefix": 248789250,
      "net_usage_words": 0,
      "max_cpu_usage_ms": 0,
      "delay_sec": 0,
      "context_free_actions": [],
      "actions": [
          {
              "account": "eosio",
              "name": "buyram",
              "authorization": [
                  {
                      "actor": "dateo",
                      "permission": "active"
                  }
              ],
              "data": "0000000000aab249608c31c618638c31102700000000000004454f5300000000"
          }
      ],
      "transaction_extensions": []
  },
  "signatures": [
      "SIG_K1_KdPS6vHR2rh1gwE2zLYtEUMWYTRuuHj6vwiu71UVy4ZsNZMrjjkHPuh2wTFVXWv2NF1GnPHcLv1ND7Vmz8xYdcMFzfhd7n"
  ],
  "unsigned_rawtx": {
      "type": "Buffer",
      "data": [
          3,
          143,
          75,
          15,
          200,
          255,
          24,
          164,
          240,
          132,
          42,
          143,
          5,
          100,
          97,
          31,
          110,
          150,
          232,
          83,
          89,
          1,
          221,
          69,
          228,
          58,
          200,
          105,
          26,
          28,
          77,
          202,
          114,
          38,
          142,
          91,
          53,
          68,
          2,
          57,
          212,
          14,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          234,
          48,
          85,
          0,
          0,
          0,
          0,
          72,
          115,
          189,
          62,
          1,
          0,
          0,
          0,
          0,
          0,
          170,
          178,
          73,
          0,
          0,
          0,
          0,
          168,
          237,
          50,
          50,
          32,
          0,
          0,
          0,
          0,
          0,
          170,
          178,
          73,
          96,
          140,
          49,
          198,
          24,
          99,
          140,
          49,
          16,
          39,
          0,
          0,
          0,
          0,
          0,
          0,
          4,
          69,
          79,
          83,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
      ]
  }
};

var buyRamParams = {
  payer:"dateo",
  receiver:"aaaaaaaaaaaa",
  quant:"1.0000 EOS"
};

var buyRamBytesParams = {
  payer: "eossonicteam",
  receiver: "sanfank12345",
  bytes: 4096
};

var transferParams = {
  from:"dateo",
  to:"eosio.names",
  quantity:"1.0000 EOS",
  memo:"bid name iblio"
};

var delegatebwParams = {
  from:"dateo",
  receiver:"dateo",
  stake_net_quantity:"1.0000 EOS",
  stake_cpu_quantity:"1.0000 EOS",
  transfer:0
};

var undelegatebwParams = {
  from:"dateo",
  receiver:"dateo",
  unstake_net_quantity:"1.0000 EOS",
  unstake_cpu_quantity:"1.0000 EOS"
};

var sellramParams = {
  account:"dateo",
  bytes:1000000
};

var refundParams = {
  owner: "infinitogate"
};

var api = null;
var coinAPI = null;

describe('api.eos', async () => {

  beforeEach(async () => {
    api = new InfinitoApi(opts);
    coinAPI = api.EOS;
  });

  it('#getBalance(account, asset_id)', async () => {
    let info = await coinAPI.getBalance(inputs.account, inputs.asset_id);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
    info.data.should.have.property('account');
    info.data.should.have.property('assets');
  });

  it('#getAccountsFromPubkey(pubkey)', async () => {
    let info = await coinAPI.getAccountsFromPubkey(inputs.pubkey);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
    info.data.should.have.property('account_names');
  });

  it('#getAccountInfo(account)', async () => {
    let info = await coinAPI.getAccountInfo(inputs.account2);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
    info.data.should.have.property('account_name');
    info.data.should.have.property('head_block_num');
    info.data.should.have.property('head_block_time');
    info.data.should.have.property('privileged');
    info.data.should.have.property('last_code_update');
    info.data.should.have.property('net_limit');
    info.data.should.have.property('cpu_limit');
    info.data.should.have.property('ram_usage');
    info.data.should.have.property('permissions');
  });

  //Current not available
  // it('#createNewAccByInfinitoWallet()', async () => {
  //   let info = await coinAPI.createNewAccByInfinitoWallet();
  //   console.log(info);
  //   info.should.have.property('cd');
  // });

  it('#getHistoryOfAssetInPubkey(pubkey, code, symbol)', async () => {
    let info = await coinAPI.getHistoryOfAssetInPubkey(inputs.pubkey2, inputs.code, inputs.symbol);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
    info.data.should.have.property('total');
    info.data.should.have.property('accounts');
  });

  it('#createTransaction()', async () => {
    let info = await coinAPI.createTransaction({
      from: 'ibl',
      to: 'datfix',
      quantity: '1.0001 EOS',
      memo: 'bidTo'
    });
    // console.log(info);
    info.should.have.property('cd');
  });

  it('#sendTransaction()', async () => {
    let info = await coinAPI.sendTransaction({jsontx: rawtx});
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#buyRam()', async () => {
    let info = await coinAPI.buyRam(buyRamParams);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#buyRamByte()', async () => {
    let info = await coinAPI.buyRamBytes(buyRamBytesParams);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#sellRam()', async () => {
    let info = await coinAPI.sellRam(sellramParams);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#createDelegateTx()', async () => {
    let info = await coinAPI.createDelegateTx(delegatebwParams);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#createUndelegateTx()', async () => {
    let info = await coinAPI.createUndelegateTx(undelegatebwParams);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#createRefundTx()', async () => {
    let info = await coinAPI.createRefundTx(refundParams);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#createRawTx()', async () => {
    let info = await coinAPI.createRawTx(transferParams);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#getRamPrice()', async () => {
    let info = await coinAPI.getRamPrice();
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#getCPUNetPrice()', async () => {
    let info = await coinAPI.getCPUNetPrice();
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
  });

  it('#getTokenList()', async () => {
    let info = await coinAPI.getTokenList();
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
    info.data.should.have.property('total');
    info.data.should.have.property('from');
    info.data.should.have.property('to');
    info.data.should.have.property('contracts');
  });

  it('#getTokenBalance(account, code, symbol)', async () => {
    let info = await coinAPI.getTokenBalance(inputs.account2, inputs.code, inputs.symbol);
    // console.log(info);
    info.should.have.property('cd');
    info.should.have.property('data');
    info.data.should.have.property('account');
    info.data.should.have.property('assets');
  });

});
