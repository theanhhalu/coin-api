const { Helper } = require('node-infinito-util');
const Assert = require('assert');
const InfinitoApi = require('../index');
const Messages = require('../lib/messages');
const ConfigTest = require('./config.test');
const util = require('util')
const chai = require("chai");
chai.should();

const opts = {
  apiKey: ConfigTest.API_KEY,
  secret: ConfigTest.SECRECT,
  baseUrl: ConfigTest.BASE_URL,
  logLevel: ConfigTest.LOG_LEVEL
};

const addresses = {
  normal: "1Dp1TZfsMDfrNwuAzXi8mJwcXNA5xiHPor",
  invalid: "1Dp1TZfsMDfrNwuAzXi8mJwcXNA5xiHPora",
  lessThan_10txs: "3FfQGY7jqsADC7uTVqF3vKQzeNPiBPTqt4",
  moreThan_10txs: "1ButHWWeVhcvV1ETBrnLw5r35hDJfFQeUo",
  moreThan_50txs: "19D7RrLKjWSBwxQfxJqZ1CnohCFy9TzFjz",
  noUTXO: "1DpSfMhn2hhHdUJiL5Uaftj8jkSV16EP2",
  someUTXO: "1BbPX745towBVLrdU1yutDzw5bsx611LoB"
};

const txIdEx = '74911c40170be8d1de04fb4170f0ddfa7d0ceeeb28d8a219e3232faf8b90d80b';
const blkIdxEx = 500000;
const blkIdEx = '000000000000000000091c6ce506b7240717198a84b6dc056221ff7967ac321a';
const rawtxEx = '01000000010bf25ce01f6e2bf074b4254a25c8c1b77c4c539fa2f27a0275cc8446321e4e2e000000006b4830450221008967c4e29fdf9097f93f656b2084197d8ab34243c3e5d64ccb37a79437b84ca6022007afad23153129bf8b1c2b010937c0a46c62cd130d68a4f1fab8217199c471a00121025887d4e8f3682998e86504b0f50e0a5cbce63d9500dc0b6dbe2a4440a055147effffffff0244cc2908000000001976a9149458784a740baaab83647060a86e228d6b272c5788ac607214000000000017a9149056dc4f8b13824d9d118ac22733bf45c5400c488700000000';

var api = null;
var coinAPI = null;

describe('api.btc', async () => {

  beforeEach(async () => {
    api = new InfinitoApi(opts);
    //EXAMPLE FOR extendMethod
    // let myMethods = [
    //   {
    //     "name": "getMyAddressInfo",
    //     "method": "GET",
    //     "url": "/BCH/addr/{address}",
    //     "params": ["address"]
    //   },
    // ];
    // api.extendMethod("test", myMethods);
    // let result = await api.test.getMyAddressInfo("1Dp1TZfsMDfrNwuAzXi8mJwcXNA5xiHPor");
    // console.log(result);
    coinAPI = api.BTC;
  });

  describe('#getBalance(address)', async () => {

    it('Get balance first time', async () => {
      var result = await coinAPI.getBalance(addresses.normal);
      Assert.ok(result.data.balance !== undefined, 'balance must be exist');
      Assert.ok(result.data.unconfirmed_balance !== undefined, 'unconfirmed_balance must be exist');
    });

    it('Get balance with wrong api key', async () => {
      coinAPI = new InfinitoApi(Helper.merge({}, opts, { apiKey : 'wrong api key' })).BTC;
      
      try {
        await coinAPI.getBalance(addresses.normal);
        Assert.fail('Should throw exception');
      } catch (err) {
        console.log('Get balance with wrong api key' + JSON.stringify(err));
        Assert.equal(err.code, Messages.invalid_api_key.code);
        Assert.equal(err.message, Messages.invalid_api_key.message);
      }
    });

    it('test dynamic ', async () => {
      let balance = await coinAPI.getBalance('getAddressInfogetAddressInfo');
      console.log('balance :', balance);

      let history = await coinAPI.getHistory(addresses.normal, 1, 2);
      console.log('history :', history);

      let utxo = await coinAPI.getUtxo(addresses.normal);
      console.log('utxo :', utxo);
    });

    it('test dynamic expired key', async () => {
      api.tokenProvider.setToken(ConfigTest.EXPRIRED_TOKEN);

      coinAPI.getBalance(addresses.normal);
      coinAPI.getHistory(addresses.normal, 1, 2);
      coinAPI.getUtxo(addresses.normal);
    });

  });

  /*************************** Add get Address info *******************************/
  describe('#getInfo(address)', async () => {

    /*Testcase: Check with valid address*/
    it('Check with valid address', async () => {
      let info = await coinAPI.getAddressInfo(addresses.normal);
      // console.log(info);
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('addr');
      info.data.should.have.property('balance');
      info.data.should.have.property('unconfirmed_balance');
      info.data.should.have.property('total_received');
      info.data.should.have.property('total_sent');
      info.data.should.have.property('total_tx');
    });
  });

  /************************** Add get Address history ******************************/
  describe('#getHistory(address)', async () => {

    /*Testcase: 
          Input parameter:
            addr with >10 transaction
            no offset
            no limit*/
    it('addr with >10 transaction | no offset | no limit', async () => {
      let info = await coinAPI.getHistory(addresses.moreThan_10txs);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('from');
      info.data.should.have.property('to');
      info.data.should.have.property('txs');
    });
  });

  /************************* Add get Address utxo ****************************/
  describe('#getUtxo(address)', async () => {

    /*Testcase: 
      Input parameter:
        addr with some utxo*/
    it('addr with some utxo', async () => {
      let info = await coinAPI.getUtxo(addresses.someUTXO);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get transaction info ****************************/
  describe('#getTxInfo(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('transaction info', async () => {
      let info = await coinAPI.getTxInfo(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('tx_id');
      info.data.should.have.property('version');
      info.data.should.have.property('locktime');
      info.data.should.have.property('vin');
      info.data.should.have.property('vout');
    });
  });

  /************************* Add get raw transaction ****************************/
  describe('#getRawTx(txHash)', async () => {

    /*Testcase: 
      Input parameter:
        transaction ID*/
    it('raw transaction', async () => {
      let info = await coinAPI.getRawTx(txIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_tx');
    });
  });

  /************************* Add get blockHash by blockIndex ****************************/
  describe('#getBlockHashByIndex(index)', async () => {

    /*Testcase: 
      Input parameter:
        Block Index*/
    it('blockHash by blockIndex', async () => {
      let info = await coinAPI.getBlockHashByIndex(blkIdxEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
    });
  });

  /************************* Add get block info ****************************/
  describe('#getBlockInfo(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('block info', async () => {
      let info = await coinAPI.getBlockInfo(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('block_id');
      info.data.should.have.property('size');
      info.data.should.have.property('height');
      info.data.should.have.property('version');
      info.data.should.have.property('merkleroot');
      info.data.should.have.property('time');
      info.data.should.have.property('nonce');
      info.data.should.have.property('bits');
      info.data.should.have.property('difficulty');
      info.data.should.have.property('chainwork');
      info.data.should.have.property('confirmations');
      info.data.should.have.property('previous_block_hash');
      info.data.should.have.property('next_block_hash');
      info.data.should.have.property('reward');
      info.data.should.have.property('pool_info');
    });
  });

  /************************* Add get transactions in a block ****************************/
  describe('#getBlockTxs(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('transactions in a block', async () => {
      let info = await coinAPI.getBlockTxs(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('total');
      info.data.should.have.property('transactions');
    });
  });

  /************************* Add get raw block ****************************/
  describe('#getRawBlock(blockId)', async () => {

    /*Testcase: 
      Input parameter:
        Block ID*/
    it('raw block', async () => {
      let info = await coinAPI.getRawBlock(blkIdEx);
      // console.log(util.inspect(info, false, null));
      info.should.have.property('cd');
      info.should.have.property('data');
      info.data.should.have.property('raw_block');
    });
  });

  /************************* post Send Raw ***********************************/
  describe('#postSendRaw', async () => {

    it('send a tx', async () => {
      let res = await coinAPI.sendTransaction({rawtx: rawtxEx});
      console.log(res);
      res.should.have.property('cd');
    });
  });
});
